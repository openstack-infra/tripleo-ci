- name: Set legacy log path
  include_role:
    name: set-zuul-log-path-fact

- block:
  - name: Check overridable settings
    vars:
      allowed_overrides:
        - 'run_tempest'
        - 'tempest_whitelist'
        - 'test_black_regex'
        - 'tempest_format'
        - 'tempest_extra_config'
        - 'tempest_plugins'
        - 'standalone_environment_files'
        - 'standalone_container_cli'
        - 'tempest_test_whitelist'
        - 'test_white_regex'
        - 'tempest_workers'
        - 'dlrn_hash_tag'
        - 'dlrn_hash_tag_newest'
        - 'use_os_tempest'
        - 'tempest_tempest_conf_overrides'
        - 'tempest_services'
        - 'tempest_run_concurrency'
        - 'validate_ha_overcloud'
    fail:
      msg: "ERROR: {{ item }} is not overridable."
    when: item not in "{{ allowed_overrides }}"
    with_items: "{{ featureset_override }}"
  - name: Generate standalone_custom_env_files from standalone_environment_files
    set_fact:
      featureset_override: "{{ featureset_override | combine(custom_env, recursive=true) }}"
    vars:
      tht_dir: /usr/share/openstack-tripleo-heat-templates/
      custom_env:
        standalone_custom_env_files: |
          {{ featureset_override.standalone_environment_files |
             default([]) |
             map('regex_replace', '^', tht_dir ) | list }}
    when: featureset_override['standalone_environment_files'] is defined
  - include_role:
      name: ceph-loop-device
    when: "{{ standalone_ceph|default(false) }}"
  - name: Generate featureset overriding file
    template:
      src: templates/featureset-override.j2
      dest: "{{ tripleo_root }}/tripleo-ci/featureset-override.yaml"
      mode: 0755
      force: yes
  - name: Include some extra for generating toci scripts
    set_fact:
      extra_vars: "--extra-vars @{{ tripleo_root }}/tripleo-ci/featureset-override.yaml"
  when: featureset_override is defined

- name: render toci_gate_test script
  template:
    src: templates/toci_gate_test.sh.j2
    dest: "{{ tripleo_root }}/tripleo-ci/toci_gate_test.sh"
    mode: 0755
    force: yes

- name: render toci_quickstart script
  template:
    src: templates/toci_quickstart.sh.j2
    dest: "{{ tripleo_root }}/tripleo-ci/toci_quickstart.sh"
    mode: 0755
    force: yes

- name: render common_vars script
  template:
    src: templates/common_vars.bash.j2
    dest: "{{ tripleo_root }}/tripleo-ci/scripts/common_vars.bash"
    force: yes

- name: render oooq_common_functions script
  template:
    src: templates/oooq_common_functions.sh.j2
    dest: "{{ tripleo_root }}/tripleo-ci/scripts/oooq_common_functions.sh"
    force: yes

- name: render ready releases.sh file
  copy:
    content: "{{ ready_releases_file }}"
    dest: "{{ workspace }}/logs/releases.sh"
    mode: 0644
    force: yes
  when: ready_releases_file is defined

- shell:
    cmd: |
      set -e
      set -x
      {% if nodes is defined %}
      export TOCI_JOBTYPE={{ environment_type }}-{{ nodes }}-featureset{{ featureset }}
      {% else %}
      export TOCI_JOBTYPE={{ environment_type }}-featureset{{ featureset }}
      {% endif %}
      export DISTRIBUTION={{ ansible_distribution }}
      export DISTRIBUTION_MAJOR_VERSION={{ ansible_distribution_major_version }}

      {% if nodes is defined %}
      export NODES_FILE={{ nodes_file }}
      {% endif %}

      # ZUUL does not set these for periodic jobs
      export ZUUL_BRANCH=${ZUUL_BRANCH:-master}
      export ZUUL_REF=${ZUUL_REF:-None}

      # Compatibility with zuul v3 variables
      export JOB_NAME={{ zuul.job }}
      export LOG_PATH={{ zuul_log_path }}

      export BRANCH_OVERRIDE="{{ branch_override | default('default') }}"
      if [ "$BRANCH_OVERRIDE" != "default" ] ; then
          export OVERRIDE_ZUUL_BRANCH=$BRANCH_OVERRIDE
      fi

      export PYTHONUNBUFFERED=true
      export TRIPLEO_ROOT={{ tripleo_root }}
      # NOTE(trown) We can move this into the multinode environment file once we
      # migrate the 2-node jobs over to zuulv3
      bash -xe $TRIPLEO_ROOT/tripleo-ci/toci_gate_test.sh
    executable: /bin/bash
    chdir: '{{ tripleo_root }}'
  environment: '{{ zuul | zuul_legacy_vars }}'
